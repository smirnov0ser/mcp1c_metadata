# Шаг 1: Выбираем базовый образ.
# Используем официальный образ Python. Версия 3.9 - хороший и стабильный выбор.
# `-slim` означает, что это облегченная версия Linux, что уменьшит размер итогового контейнера.
FROM python:3.12-slim

# Шаг 2: Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды будут выполняться в этой папке.
WORKDIR /app

# Шаг 3: Копируем файл с зависимостями и устанавливаем их.
# Это делается отдельно от кода для оптимизации. Docker кэширует этот шаг,
# и если зависимости не меняются, он не будет переустанавливать их при каждой сборке кода.
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Шаг 4: Копируем все файлы приложения из папки 'app' на хосте в рабочую директорию '/app' внутри контейнера.
COPY ./app .

# Шаг 5 (Опционально, но рекомендуется): Указываем порт, который слушает ваше приложение.
# Если ваш сервис - это веб-API (например, на FastAPI или Flask), который слушает порт 8000, раскомментируйте строку ниже.
# Это просто метаданные, реальный проброс порта делается при запуске.
EXPOSE 8000

# Шаг 6: Указываем команду для запуска вашего приложения.
# Эта команда выполнится при старте контейнера. Выберите подходящий вариант.

# ----- ВАРИАНТ А: Для простого скрипта, который что-то делает и завершается -----
CMD ["python", "src/main.py"]

# ----- ВАРИАНТ Б: Для веб-сервиса на FastAPI/Uvicorn -----
# Запускает веб-сервер, доступный со всех сетевых интерфейсов внутри контейнера на порту 8000.
# CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

# ----- ВАРИАНТ В: Для веб-сервиса на Flask -----
# Убедитесь, что в вашем Flask-скрипте запуск выглядит как app.run(host='0.0.0.0')
# CMD ["flask", "run", "--host=0.0.0.0", "--port=5000"]